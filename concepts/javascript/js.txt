what is javascript environment?
A JavaScript environment refers to the context in which JavaScript code is executed. JavaScript can operate in various environments, some of them are Browser, Node, Deno(Both created by Ryan Dahl), ReactNative, etc

Why alert(3+3) gives in error inside js file but runs smoothly in the browser?
This is because of the environment in which code is running. A js file does not have have access to the "window" object which is where the browser specific functions like alert is defined.

What is ECMAScript?
ECMAScript is a scripting language specification that serves as the foundation for writing JavaScript. It is standardized by ECMA International.


What are keywords?
Keywords are predefined, reserved words that have a specific meaning and function within a language. They cannot be used for variable names, function names, or any other identifiers because they are part of the language's syntax and structure.
Examples are:
var, let, const – used to declare variables.
if, else, switch – used for conditional statements.
for, while, do – used for loops and iteration.
function, return – used to define and return values from functions.
class, extends, constructor – used for object-oriented programming.
try, catch, finally – used for handling exceptions.
In JavaScript, we can also declare a variable without assigning any keyword to it. ex, accountName

**to print more than one variable using javascript, we can use console.table([a,b,c])

What are the differences between var let and const?
var is the oldest way to declare variables in JavaScript and is function-scoped. This means that when you declare a variable with var inside a function, it is only accessible within that function. However, if var is declared outside of a function, it becomes globally scoped, making it accessible from anywhere in the program. One key limitation of var is that it does not respect block-level scope, such as inside loops or conditional statements (if, for, etc.). This can lead to unexpected behavior since variables declared with var are accessible even before their declaration, although their value will be undefined until the declaration line is reached.

let was introduced in ES6 (2015) and is block-scoped, meaning it is only accessible within the specific block (enclosed by {}) where it is declared. This makes let a safer choice for variable declarations inside loops, conditionals, or any code block, as it reduces the chances of accidental re-use or access outside the intended scope. Unlike var, let cannot be accessed before declaration. Additionally, let allows reassignment of its value, but re-declaration within the same scope is not permitted.

const is also block-scoped like let, but it has an additional restriction: once a variable is declared with const, it cannot be reassigned. This makes const the ideal choice for variables whose values should not change throughout the program, such as constants or fixed values. However, if a const variable is an object or array, the contents of the object or array can still be modified, though the variable itself cannot be reassigned to a different value or object. Like let, accessing const before its declaration will result in a temporal dead zone error.

What are dataTypes?
Data types in programming define the kinds of values a variable can hold and what operations can be performed on those values.

In JavaScript, data types are divided into two main categories: primitive and non-primitive (reference) types.

1. Primitive Data Types
Primitive data types are the most basic types and represent single values. They are immutable(onperforming an operation the original value will not be altered but will return a new one). However, you can reassign the variable to hold a new value. The immutability applies to the value, not the variable.
Example: 
let x = 5;         // 'x' is assigned the value 5
x = 10;            // Reassigned to a new value 10
console.log(x);    // Output: 10

The main primitive dataTypes in JavaScript are:
Number	    -->	Represents numeric values
String	    -->	Represents text
Boolean	    -->	Represents logical true or false
Undefined	  -->	Uninitialized variable
Null	      -->	Explicitly represents "no value"
Symbol	    -->	Represents a unique identifier (ES6)
BigInt	    -->	Represents large integers (ES2020)

Difference between null and undefined 
--> null is a standalone value which has been assigned to a variable, undefined is something for which we have yet not declared a value

How to convert number to string?
by using String(num)
How to convert string to number?
by using Number(str)

2. Non-Primitive (Reference) Data Types
Non-primitive data types, also known as reference types, hold references (or memory addresses) to the values rather than the values themselves. They are mutable, meaning their content can be changed.

The main non-primitive dataTypes in JavaScript are:
Object --> are collections of key-value pairs, where values can be of any data type (primitive or non-primitive).
ex: let person = {
  name: "John",
  age: 30,
  isEmployed: true
};

Array --> are ordered collections of values, which can be of any type, including other arrays or objects. Arrays are a type of object.
ex: let fruits = ["apple", "banana", "cherry"];

Function --> are blocks of code that can be executed whenever they are called. Functions in JavaScript are also considered objects.
ex: function greet() {
  return "Hello!";
}


how to find the dataType of any variable?
by using typeOf() operater

**JavaScript is a dynamically typed language. This means that the type of a variable is determined at runtime rather than at compile time, and variables can hold values of any type without having to declare their type explicitly.


About Symbol dataType
The Symbol data type is a unique(Even if two symbols are created with the same description, they are still distinct and are not equal to each other) and immutable primitive data type introduced in ES6.

const sym1 = Symbol('description');
const sym2 = Symbol('description');
console.log(sym1 === sym2); // Output: false

Memory in JS
JS uses two types of memory: 
1) stack memory --> for primitive dataType
2) heap memory --> for non-primitive dataType

In stack memory, we can access a copy of the memory/variable but in heap memory we can access the real memory/variable.
For eg,
  const name = "Ankur"
  const anotherName = name;
  anotherName = "Aaryan"
  on console.log(name,anotherName) we will get two different outputs but

  const Obj ={
    name:"Ankur"
  }
  const myObj= Obj;
  myObj.name="Aaryan"
  now on console.log(Obj.name,myObj.name), we will get output as Aaryan, because both of these variable are referencing to a single memory location.

Arrays
--> it is a collection of multiple items under a single variable
--> it is resizeable
--> it can contain elements of multiple dataType
--> on performing copy operation on an array, it creates a shallow copy of the array

**Shallow Copy and Deep Copy**
A shallow copy creates a new array, but it does not create new copies of the elements within the array. Instead, it points to the same elements as the original array. A deep copy, on the other hand, creates a completely independent copy of both the array and its data. It does not share any data with the original array

Array Methods
Here are one-line explanations for the listed array methods:

1. push: Adds elements to the end of an array
2. pop: Removes the last element of an array 
3. unshift: Adds elements to the beginning of an array 
4. shift: Removes the first element of an array 
5. includes: Checks if an array contains a specified element
6. indexOf: Returns the first index at which a given element is found
7. join: Joins all elements of an array into a string, separated by a specified separator.
8. slice: Returns a shallow copy of a portion of an array, without modifying the original array.
9. splice: Adds/removes elements at a specific index, modifying the original array.
10. concat: Merges two or more arrays into a new array without modifying the originals.
11. spread (...xyz): spreads both the arrays and stores it element by element
12. flat(infinity): Flattens nested arrays into a single-level array, up to the specified depth (infinity flattens all levels). more effective than spread
13. Array.isArray: Checks if a value is an array 
14. Array.from: Creates a new array from an iterable or array-like object.
15. Array.of: Creates a new array with the specified elements.

Object
a collection of key-value pairs, used to represent real-world entities or structures, which allows to group related data and functionality together. 


init: i) by Constructor(singleton)
      ii) by literals (const obj ={})
access: 
      i) by dot operator(.)
      ii) by [ ]
the dot operator doesn't always work. for eg; if a key has space in between. ie, full name
we cannot access it using dot-operator but we can access it like ["full name"]

In case of Symbol, if we use dot operator, the dataType of variable get changed. 
for eg; 
const mySym = Symbol("key1");
const JsUser = { mySym: "myKey1" }; //(mySym is treated as a string key)
console.log(JsUser.mySym);  // Output: "myKey1" (accessing the "mySym" key as a string)

const JsUser1 = { [mySym]: "myKey1" };  // Now mySym is a Symbol key
console.log(JsUser1[mySym]);  // Output: "myKey1" // Accessing with the symbol as a key
console.log(JsUser1.mySym) // we can't access it as String

Object Methods
i) freeze --> Once an object is frozen, its properties cannot be modified
ii) assign --> returns a concatenated object
    use: const obj4=Object.assign({}, obj1, obj2, obj3)
    {}--> target
    obj1, obj2, obj3 --> source
    *if we don't use {}, obj1 will become target object
ii) spread --> expands an object into individual elements/properties.
    use: const obj3 = {...obj1,...obj2}
iii) entries --> returns the key-value pair in form of array elements
iv) hasOwnProperty --> checks whether an object has a property as its own (not inherited) property.
    use:  const obj = { a: 1 };
          console.log(obj.hasOwnProperty('a'));  // Output: true
          console.log(obj.hasOwnProperty('toString'));  // Output: false

Functions 
A block of code designed to perform a specific task or set of tasks. THese are reusable, we can define a function once and execute (or "call") it as many times as needed. They help organize code into logical, manageable pieces.

definition: function myName(){}
calling:  i)  reference: myName ==> passing the function as an argument
          ii) execution: myName() ==> running the function

function myName(name){ //name == parameter
  return `${name}` 
}
console.log(myName("Ankur")) // "Ankur" == argument

what if no argument is passed by a function?
we will get undefined as a return value because it is the default parameter

what if we dont know number of argument to get passed? (shopping cart problem)
if we don't know the number of arguments to pass, we can handle this with the rest operator (...args).This allows the function to accept an arbitrary number of arguments

TypeChecking --> JavaScript is a dynamically typed language. It allows to declare variables without defining the variable type. For eg, a variable can be declared and assigned a number. But as we write more code, values might get misplaced, and we might assign the same variable a string or boolean. This would affect your code when it runs.
example:
function add(x, y) {
    return x + y;
}
console.log(add(1, 2));   // Output: 3
console.log(add(1, "2")); // Output: "12" (string concatenation, no error)

scope of a  variable
global -->  var
block --> let, const

let a = 10

if(true){
    let a=20
    console.log(a)
}
console.log(a)// this code prints 20 and 10 but

let a = 10

if(true){
    a=20
    console.log(a)
}
console.log(a) //this code prints 20 and 20

Expressions --> A function expression is a way to define a function in JavaScript by assigning it to a variable or a constant. for eg, 
const addTwo = function(num){
	return num+2;
}

we can access a function before its declaration but we cannot access an expression before declaration

console.log(addOne(5)) // this will not give any error 
function addOne(num){
	return num+1
}

console.log(addTwo(5)) //this gives an error 
const addTwo = function(num){
	return num+2;
}

this happens because of a concept called hoisting
hoisting in JavaScript is a behavior in which variable and function declarations are moved to the top of their containing scope (global or function scope) during the compilation phase of code execution. This means that we can reference variables and functions before they are actually declared in the code.
However, only the declarations are hoisted, not the initializations (or assignments). This leads to the error we see in above code.

this keyword --> The this keyword in refers to the context in which it is executed. this keyword works on current context not on current scope

when we do console.log(this) inside a function we get the global object 

when we do console.log(this) in a node environment we get an empty object but when we do the same on browser we get a window object in return because window is the default global object for browser

arrow function --> introduced in ECMAScript 6 (ES6), provide a shorter syntax for writing functions. It also have some unique features compared to traditional function expressions
declaration : 
const abc = ()=> {
console.log("hi")
}

when we do abc(), in case of arrow function also we get an empty object,  
it also handle the this keyword differently compared to traditional function expressions.

implicit return:
const addTwo(num1, num2)=> (num1+num2) // we can't use curly braces here because that will make it a explicit function and we will have to write return statement here
const addTwo(num1, num2)=> num1+num2
these both are also arrow functions but we dont have to write return statement here
Implicit return in arrow functions is only possible when the function body consists of a single expression

immediately invoked function expression(IIFE) : to prevent pollution due to global scope
we have to use parenthesis to stop the execution of this function

execution context and call stack

comparision operators:  <,>,==,<=,>=,!=, ===,!==

logical operators: &&(all should be true), ||(one should be true),

Nullish Coalescing operator (??): null and undefined
example
null??10
undefined??12

terniary operator (?) : condition ? true : false
example
const age =10
age>=12:console.log("age is greater than 12"):console.log("age is less than 10")

truthy and flasy value
falsy values : false,0, -0,BigInt On, "", null, undefined, NaN
truthy values: "0", "false", " ", [], {}, function(){},

Map
difference bewteen Map and Object
--> map contains only unique values, it remembers the order of its elemtns
--> maps are uniterable
--> we can use for of loop on Maps but not on objects

callback fnctions --> dont have a name

forEach --> it doesn;t return values
filter --> returns the value
map --> also returns the value, supports chaining

reduce --> it needs an initial value and after that it is replaced by whatever we have recieved in accumulator

DOM --> The DOM is a critical concept, providing a structured representation of a web document and a way to interact with and manipulate it programmatically. By understanding and using the DOM, we can create dynamic and interactive web pages.
DOM selectors
1) getElementById()
2) getElementByClassName()
3) querySelector()
4) querySelectorAll()

textContent --> return full text content inside an element, doesn't care about its css property
innerHTML --> return full html content inside an element
innerText --> return only the visible text content inside an element
NodeList(forEach enabled) vs Array(loop enabled) vs HTMLCollection(no looping)

convert HTMLCollection/NodeList to Array --> Arrar.from()