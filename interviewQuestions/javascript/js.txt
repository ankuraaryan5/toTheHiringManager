what is javascript environment?
A JavaScript environment refers to the context in which JavaScript code is executed. JavaScript can operate in various environments, some of them are Browser, Node, Deno(Both created by Ryan Dahl), ReactNative, etc

Why alert(3+3) gives in error inside js file but runs smoothly in the browser?
This is because of the environment in which code is running. A js file does not have have access to the "window" object which is where the browser specific functions like alert is defined.

What is ECMAScript?
ECMAScript is a scripting language specification that serves as the foundation for writing JavaScript. It is standardized by ECMA International.


What are keywords?
Keywords are predefined, reserved words that have a specific meaning and function within a language. They cannot be used for variable names, function names, or any other identifiers because they are part of the language's syntax and structure.
Examples are:
var, let, const – used to declare variables.
if, else, switch – used for conditional statements.
for, while, do – used for loops and iteration.
function, return – used to define and return values from functions.
class, extends, constructor – used for object-oriented programming.
try, catch, finally – used for handling exceptions.
In JavaScript, we can also declare a variable without assigning any keyword to it. ex, accountName

**to print more than one variable using javascript, we can use console.table([a,b,c])

What are the differences between var let and const?
var is the oldest way to declare variables in JavaScript and is function-scoped. This means that when you declare a variable with var inside a function, it is only accessible within that function. However, if var is declared outside of a function, it becomes globally scoped, making it accessible from anywhere in the program. One key limitation of var is that it does not respect block-level scope, such as inside loops or conditional statements (if, for, etc.). This can lead to unexpected behavior since variables declared with var are accessible even before their declaration, although their value will be undefined until the declaration line is reached.

let was introduced in ES6 (2015) and is block-scoped, meaning it is only accessible within the specific block (enclosed by {}) where it is declared. This makes let a safer choice for variable declarations inside loops, conditionals, or any code block, as it reduces the chances of accidental re-use or access outside the intended scope. Unlike var, let cannot be accessed before declaration. Additionally, let allows reassignment of its value, but re-declaration within the same scope is not permitted.

const is also block-scoped like let, but it has an additional restriction: once a variable is declared with const, it cannot be reassigned. This makes const the ideal choice for variables whose values should not change throughout the program, such as constants or fixed values. However, if a const variable is an object or array, the contents of the object or array can still be modified, though the variable itself cannot be reassigned to a different value or object. Like let, accessing const before its declaration will result in a temporal dead zone error.

What are dataTypes?
Data types in programming define the kinds of values a variable can hold and what operations can be performed on those values.

In JavaScript, data types are divided into two main categories: primitive and non-primitive (reference) types.

1. Primitive Data Types
Primitive data types are the most basic types and represent single values. They are immutable(onperforming an operation the original value will not be altered but will return a new one). However, you can reassign the variable to hold a new value. The immutability applies to the value, not the variable.
Example: 
let x = 5;         // 'x' is assigned the value 5
x = 10;            // Reassigned to a new value 10
console.log(x);    // Output: 10

The main primitive dataTypes in JavaScript are:
Number	    -->	Represents numeric values
String	    -->	Represents text
Boolean	    -->	Represents logical true or false
Undefined	-->	Uninitialized variable
Null	    -->	Explicitly represents "no value"
Symbol	    -->	Represents a unique identifier (ES6)
BigInt	    -->	Represents large integers (ES2020)

Difference between null and undefined 
--> null is a standalone value which has been assigned to a variable, undefined is something for which we have yet not declared a value

How to convert number to string?
by using String(num)
How to convert string to number?
by using Number(str)

2. Non-Primitive (Reference) Data Types
Non-primitive data types, also known as reference types, hold references (or memory addresses) to the values rather than the values themselves. They are mutable, meaning their content can be changed.

The main non-primitive dataTypes in JavaScript are:
Object --> are collections of key-value pairs, where values can be of any data type (primitive or non-primitive).
ex: let person = {
  name: "John",
  age: 30,
  isEmployed: true
};

Array --> are ordered collections of values, which can be of any type, including other arrays or objects. Arrays are a type of object.
ex: let fruits = ["apple", "banana", "cherry"];

Function --> are blocks of code that can be executed whenever they are called. Functions in JavaScript are also considered objects.
ex: function greet() {
  return "Hello!";
}


how to find the dataType of any variable?
by using typeOf() operater

**JavaScript is a dynamically typed language. This means that the type of a variable is determined at runtime rather than at compile time, and variables can hold values of any type without having to declare their type explicitly.


About Symbol dataType
The Symbol data type is a unique(Even if two symbols are created with the same description, they are still distinct and are not equal to each other) and immutable primitive data type introduced in ES6.

const sym1 = Symbol('description');
const sym2 = Symbol('description');
console.log(sym1 === sym2); // Output: false
